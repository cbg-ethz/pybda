# Copyright (C) 2018, 2019 Simon Dirmeier
#
# This file is part of pybda.
#
# pybda is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pybda is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pybda. If not, see <http://www.gnu.org/licenses/>.
#
# @author = 'Simon Dirmeier'
# @email = 'simon.dirmeier@bsse.ethz.ch'


import typing
import re

from pybda import dirname
from pybda import PyBDAConfig
from pybda.globals import (
    CLUSTERING__,
    CLUSTERING_INFILE__,
    DEBUG__,
    DIM_RED__,
    DIM_RED_INFILE__,
    FAMILY__,
    FACTOR_ANALYSIS__,
    FEATURES__,
    FOREST__,
    GBM__,
    GLM__,
    GMM__,
    INFILE__,
    ICA__,
    KPCA__,
    KMEANS__,
    LDA__,
    MAHA__,
    MAX_CENTERS__,
    META__,
    METHODS__,
    N_CENTERS__,
    N_COMPONENTS__,
    OUTFOLDER__,
    OUTLIERS__,
    OUTLIERS_INFILE__,
    PCA__,
    PREDICT__,
    PVAL__,
    REGRESSION_INFILE__,
    REGRESSION__,
    RESPONSE__,
    REQUIRED_ARGS__,
    SPARKPARAMS__,
    SPARKIP__,
    SPARK__)

from pybda.logger import logger_format
pybda_config = PyBDAConfig(config)


def _run(cmd):
    if DEBUG__ in pybda_config:
        shell("echo -e '\033[1;33m Submitting job {cmd} \033[\033[0m'")
    shell("{cmd}")


def _submit_dim_red(method, inpt, out, params):
    cmd = """{} --master {} {} {} {} {} {} {} > {}""".format(
        pybda_config[SPARK__],
        pybda_config[SPARKIP__],
        params,
        method,
        pybda_config[N_COMPONENTS__],
        inpt,
        pybda_config[FEATURES__],
        out,
        out + "-spark.log")
    _run(cmd)


rule factor_analysis:
    input:
        expand("{infile}", infile=pybda_config.infiles(FACTOR_ANALYSIS__))
    output:
        expand("{outfolder}/{dimred}{fls}",
               outfolder=pybda_config[OUTFOLDER__],
               dimred=pybda_config.outfiles_basename(FACTOR_ANALYSIS__),
               fls=[".tsv", "-loadings.tsv", "-loglik.tsv"]),
        directory(expand("{outfolder}/{dimred}-plot",
                         outfolder=pybda_config[OUTFOLDER__],
                         dimred=pybda_config.outfiles_basename(FACTOR_ANALYSIS__)))
    params:
        out = os.path.join(pybda_config[OUTFOLDER__],
                           pybda_config.outfiles_basename(FACTOR_ANALYSIS__)),
        fa = os.path.join(dirname(), "factor_analysis.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]])
    run:
        _submit_dim_red(params.fa, input, params.out, params.params)


rule pca:
    input:
        expand("{infile}", infile=pybda_config.infiles(PCA__))
    output:
        expand("{outfolder}/{dimred}{fls}",
               outfolder=pybda_config[OUTFOLDER__],
               dimred=pybda_config.outfiles_basename(PCA__),
               fls=[".tsv", "-loadings.tsv"]),
        directory(expand("{outfolder}/{dimred}-plot",
                         outfolder=pybda_config[OUTFOLDER__],
                         dimred=pybda_config.outfiles_basename(PCA__)))
    params:
        out = os.path.join(pybda_config[OUTFOLDER__],
                           pybda_config.outfiles_basename(PCA__)),
        pca = os.path.join(dirname(), "pca.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]])
    run:
        _submit_dim_red(params.pca, input, params.out, params.params)


rule kpca:
    input:
        expand("{infile}", infile=pybda_config.infiles(KPCA__))
    output:
        expand("{outfolder}/{dimred}{fls}",
               outfolder=pybda_config[OUTFOLDER__],
               dimred=pybda_config.outfiles_basename(KPCA__),
               fls=[".tsv", "-loadings.tsv"]),
        directory(expand("{outfolder}/{dimred}-plot",
                         outfolder=pybda_config[OUTFOLDER__],
                         dimred=pybda_config.outfiles_basename(KPCA__)))
    params:
        out = os.path.join(pybda_config[OUTFOLDER__],
                           pybda_config.outfiles_basename(KPCA__)),
        pca = os.path.join(dirname(), "kpca.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]])
    run:
        _submit_dim_red(params.pca, input, params.out, params.params)


rule ica:
    input:
        expand("{infile}", infile=pybda_config.infiles(ICA__))
    output:
        expand("{outfolder}/{dimred}{fls}",
               outfolder=pybda_config[OUTFOLDER__],
               dimred=pybda_config.outfiles_basename(ICA__),
               fls=[".tsv", "-loadings.tsv"]),
        directory(expand("{outfolder}/{dimred}-plot",
                         outfolder=pybda_config[OUTFOLDER__],
                         dimred=pybda_config.outfiles_basename(ICA__)))
    params:
        out = os.path.join(pybda_config[OUTFOLDER__],
                           pybda_config.outfiles_basename(ICA__)),
        ica = os.path.join(dirname(), "ica.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]])
    run:
        _submit_dim_red(params.ica, input, params.out, params.params)


rule lda:
    input:
        expand("{infile}", infile=pybda_config.infiles(LDA__))
    output:
        expand("{outfolder}/{dimred}{fls}",
               outfolder=pybda_config[OUTFOLDER__],
               dimred=pybda_config.outfiles_basename(LDA__),
               fls=[".tsv",  "-projection.tsv"]),
        directory(expand("{outfolder}/{dimred}-plot",
                         outfolder=pybda_config[OUTFOLDER__],
                         dimred=pybda_config.outfiles_basename(LDA__)))
    params:
        out = os.path.join(pybda_config[OUTFOLDER__],
                           pybda_config.outfiles_basename(LDA__)),
        pca = os.path.join(dirname(), "lda.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]])
    run:
        cmd = """{} --master {} {} {} {} {} {} {} {} > {}""".format(
            pybda_config[SPARK__],
            pybda_config[SPARKIP__],
            params.params,
            params.pca,
            pybda_config[N_COMPONENTS__],
            input,
            pybda_config[FEATURES__],
            pybda_config[RESPONSE__],
            params.out,
            params.out + "-spark.log")
        _run(cmd)


rule sample:
    input:
        expand("{infile}", infile=pybda_config[INFILE__])
    output:
        out = expand("{outfolder}/sample_of_{n}.tsv",
                     outfolder=pybda_config[OUTFOLDER__],
                     n=pybda_config["sample"])
    params:
        params = " ".join([x for x in config[SPARKPARAMS__]]),
        sam = os.path.join(dirname(), "sampler.py"),
        out = expand("{outfolder}/sample_of_{n}",
                        outfolder=pybda_config[OUTFOLDER__],
                        n=pybda_config["sample"])
    run:
        var = None
        if RESPONSE__ in pybda_config:
            var = "--variable " + str(pybda_config[RESPONSE__])
        cmd = """{} --master {} {} {} {} {} {} {}""".format(
            pybda_config[SPARK__],
            pybda_config[SPARKIP__],
            params.params,
            params.sam,
            input,
            pybda_config["sample"],
            params.out[0],
            var)
        _run(cmd)


rule outliers:
    input:
        expand("{outfolder}/{dimred}",
               outfolder=pybda_config[OUTFOLDER__],
               dimred=pybda_config[DIM_RED__])
    output:
        out = directory(expand("{outfolder}/{outlier}",
                               outfolder=pybda_config[OUTFOLDER__],
                               outlier=MAHA__))
    params:
        params = " ".join([x for x in config[SPARKPARAMS__]]),
        outr = os.path.join(dirname(), "outliers.py"),
        pval = pybda_config[PVAL__] if PVAL__ in pybda_config else 0.05
    run:
        cmd = """{} --master {} {} {} {} {} {}""".format(
            pybda_config[SPARK__],
            pybda_config[SPARKIP__],
            params.params,
            params.outr,
            input,
            output.out,
            params.pval)
        if DEBUG__ in pybda_config:
            shell("echo -e '\033[1;33m Submitting job {cmd} \033[0m'")
        shell("{cmd}")


def _run_regression(params, reg, input, out):
    predict = "None"
    if PREDICT__ in pybda_config:
        predict = pybda_config[PREDICT__]
    cmd = """{} --master {} {} {} {} {} {} {} {} {} {} {} > {}""".format(
          pybda_config[SPARK__],
          pybda_config[SPARKIP__],
          params,
          reg,
          "--predict", predict,
          input,
          pybda_config[META__],
          pybda_config[FEATURES__],
          pybda_config[RESPONSE__],
          pybda_config[FAMILY__],
          out,
          out + "-spark.log")
    _run(cmd)


rule glm:
    input:
        expand("{infile}", infile=pybda_config.infiles(GLM__))
    output:
        expand("{outfolder}/{glm}{out}",
               glm=pybda_config.outfiles_basename(GLM__),
               outfolder=pybda_config[OUTFOLDER__],
               out=["-table.tsv", "-statistics.tsv"])
    params:
        out = os.path.join(pybda_config[OUTFOLDER__],
                           pybda_config.outfiles_basename(GLM__)),
        reg = os.path.join(dirname(), "glm.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]]),
    run:
        _run_regression(params.params, params.reg, input, params.out)


rule forest:
    input:
        expand("{infile}", infile=pybda_config.infiles(FOREST__))
    output:
        expand("{outfolder}/{forest}{out}",
               forest=pybda_config.outfiles_basename(FOREST__),
               outfolder=pybda_config[OUTFOLDER__],
               out=["-statistics.tsv"])
    params:
        out = os.path.join(pybda_config[OUTFOLDER__],
                           pybda_config.outfiles_basename(FOREST__)),
        reg = os.path.join(dirname(), "forest.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]]),
    run:
        _run_regression(params.params, params.reg, input, params.out)


rule gbm:
    input:
        expand("{infile}", infile=pybda_config.infiles(GBM__))
    output:
        expand("{outfolder}/{gbm}{out}",
               gbm=pybda_config.outfiles_basename(GBM__),
               outfolder=pybda_config[OUTFOLDER__],
               out=["-statistics.tsv"])
    params:
        out = os.path.join(pybda_config[OUTFOLDER__],
                           pybda_config.outfiles_basename(GBM__)),
        reg = os.path.join(dirname(), "gbm.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]]),
    run:
        _run_regression(params.params, params.reg, input, params.out)


def _run_clustering(params, kme, input, out):
    inreg = re.compile("(?:.+/)?(.+)\.tsv")
    inmatch = inreg.match(input).group(1)

    if not re.match(".*{}.*".format(inmatch), out):
        print("input/output file mismatch:\n\t{} -> {}".format(input, out))
        return

    clust = pybda_config[N_CENTERS__].replace(" ", "")
    cmd = """{} --master {} {} {} {} {} {} {} > {}""".format(
          pybda_config[SPARK__],
          pybda_config[SPARKIP__],
          params,
          kme,
          clust,
          input,
          pybda_config[FEATURES__],
          out,
          out + "-spark.log")
    _run(cmd)


rule kmeans:
    input:
        expand("{infile}", infile=pybda_config.infiles(KMEANS__))
    output:
        directory(expand("{outfolder}/{clust}",
                         clust=pybda_config.outfiles_basename(KMEANS__),
                         outfolder=pybda_config[OUTFOLDER__])),
        expand("{outfolder}/{clust}-profile.{out}",
               clust=pybda_config.outfiles_basename(KMEANS__),
               outfolder=pybda_config[OUTFOLDER__],
               out=["png", "pdf", "eps", "svg", "tsv"]),
        directory(expand("{outfolder}/{clust}-transformed-K{k}-clusters",
                         clust=pybda_config.outfiles_basename(KMEANS__),
                         outfolder=pybda_config[OUTFOLDER__],
                         k=str(pybda_config[N_CENTERS__]).replace(" ", "").split(",")))
    params:
        out = expand("{fold}/{out}",
                     fold=pybda_config[OUTFOLDER__],
                     out=pybda_config.outfiles_basename(KMEANS__)),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]]),
        kme = os.path.join(dirname(), "kmeans.py")
    run:
        for i, o, in zip(input, params.out):
            _run_clustering(params.params, params.kme, i, o)


rule gmm:
    input:
        expand("{infile}", infile=pybda_config.infiles(GMM__))
    output:
        directory(expand("{outfolder}/{clust}",
                         clust=pybda_config.outfiles_basename(GMM__),
                         outfolder=pybda_config[OUTFOLDER__])),
        expand("{outfolder}/{clust}-profile.{out}",
               clust=pybda_config.outfiles_basename(GMM__),
               outfolder=pybda_config[OUTFOLDER__],
               out=["png", "pdf", "eps", "svg", "tsv"]),
        directory(expand("{outfolder}/{clust}-transformed-K{k}-components",
                         clust=pybda_config.outfiles_basename(GMM__),
                         outfolder=pybda_config[OUTFOLDER__],
                         k=str(pybda_config[N_CENTERS__]).replace(" ", "").split(",")))
    params:
        out = expand("{fold}/{out}",
                     fold=pybda_config[OUTFOLDER__],
                     out=pybda_config.outfiles_basename(GMM__)),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]]),
        kme = os.path.join(dirname(), "gmm.py")
    run:
        for i, o, in zip(input, params.out):
            _run_clustering(params.params, params.kme, i, o)
