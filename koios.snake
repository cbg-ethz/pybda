rule all:
    input:
        expand("{outfolder}/{dimred}",
               outfolder = config["outfolder"],
               dimred = ["fa", "pca", "kpca"]),
        expand("{outfolder}/{dimred}.log",
               outfolder = config["outfolder"],
               dimred = ["fa", "pca", "kpca"]),

        expand("{outfolder}/{dimred}-factors-variance_explained.png",
               outfolder = config["outfolder"],
               dimred = ["fa", "pca", "kpca"]),
        expand("{outfolder}/{dimred}-factors-biplot.png",
               outfolder = config["outfolder"], dimred = ["fa", "pca", "kpca"]),
        expand("{outfolder}/{dimred}-factors.log",
               outfolder = config["outfolder"],
               dimred = config["dimred"]),

        expand("{outfolder}/{dimred}-sample.tsv",
               outfolder=config["outfolder"],
               dimred=["fa", "pca", "kpca"]),
        expand("{outfolder}/{dimred}-sample.log",
               outfolder=config["outfolder"],
               dimred=["fa", "pca", "kpca"]),
        expand("{outfolder}/{dimred}-sample-feature_distributions",
               outfolder=config["outfolder"],
               dimred=["fa", "pca", "kpca"]),

        expand("{outfolder}/outlier-removal", outfolder=config["outfolder"]),
        expand("{outfolder}/outlier-removal.log", outfolder=config["outfolder"]),

        expand("{outfolder}/{clustering}-fit-lrt_path.tsv",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),
        expand("{outfolder}/{clustering}-fit.log",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),

        expand("{outfolder}/{clustering}-fit-plot.log",
               outfolder=config["outfolder"], clustering = ["kmeans", "gmm"]),
        expand("{outfolder}/{clustering}-fit-cluster_sizes-stats.tsv",
               outfolder=config["outfolder"], clustering = ["kmeans", "gmm"]),

        expand("{outfolder}/{clustering}-transformed",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),
        expand("{outfolder}/{clustering}-transformed.log",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),
#
        expand("{outfolder}/{clustering}-transformed-statistics.log",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),
        expand("{outfolder}/{clustering}-transformed-statistics-gene_prediction_counts",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),
        expand("{outfolder}/{clustering}-transformed-statistics-silhouette.tsv",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),

        expand("{outfolder}/{clustering}-transformed-statistics-gene_prediction_counts",
               outfolder=config["outfolder"],
               clustering = ["kmeans", "gmm"]),
        expand("{outfolder}/{clustering}-transformed-statistics-silhouette.tsv",
               outfolder=config["outfolder"],
               clustering = ["kmeans", "gmm"])


rule factor_analysis:
    input:
        expand("{infile}", infile=config["infile"])
    output:
        expand("{outfolder}/fa.log", outfolder=config["outfolder"]),
        out = expand("{outfolder}/fa", outfolder=config["outfolder"])
    run:
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    2-dimension_reduction/1a-factor_analysis-spark.py \
                    -c {} \
                    -f {} \
                    -o {}""".format(
            config["spark"], config["sparkip"], params, config["n_components"], input, output.out)
        shell("{cmd}")


rule pca:
    input:
        expand("{infile}", infile=config["infile"])
    output:
        expand("{outfolder}/pca.log", outfolder=config["outfolder"]),
        out = expand("{outfolder}/pca", outfolder=config["outfolder"])
    run:
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    2-dimension_reduction/1a-factor_analysis-spark.py \
                    -c {} \
                    -f {} \
                    -o {}""".format(
            config["spark"], config["sparkip"], params, config["factors"], input, output.out)
        shell("{cmd}")


rule kpca:
    input:
        expand("{infile}", infile=config["infile"])
    output:
        expand("{outfolder}/kpca.log", outfolder=config["outfolder"]),
        out = expand("{outfolder}/kpca", outfolder=config["outfolder"])
    run:
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    2-dimension_reduction/1a-factor_analysis-spark.py \
                    -c {} \
                    -f {} \
                    -o {}""".format(
            config["spark"], config["sparkip"], params, config["factors"], input, output.out)
        shell("{cmd}")


rule fa_plot:
    input:
        expand("{outfolder}/fa", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/fa-factors.log", outfolder=config["outfolder"]),
        expand("{outfolder}/fa-likelihood_path.png", outfolder=config["outfolder"]),
        expand("{outfolder}/fa-factors-variance_explained.png", outfolder=config["outfolder"]),
        expand("{outfolder}/fa-factors-biplot.png", outfolder=config["outfolder"])
    shell:
        "2-dimension_reduction/1b-factor_analysis_plot.R {config[outfolder]}"


rule pca_plot:
    input:
        expand("{outfolder}/pca", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/pca-factors.log", outfolder=config["outfolder"]),
        expand("{outfolder}/pca-factors-variance_explained.png", outfolder=config["outfolder"]),
        expand("{outfolder}/pca-factors-biplot.png", outfolder=config["outfolder"])
    shell:
        "2-dimension_reduction/1b-factor_analysis_plot.R {config[outfolder]}"


rule kpca_plot:
    input:
        expand("{outfolder}/kpca", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/kpca-factors.log", outfolder=config["outfolder"]),
        expand("{outfolder}/kpca-factors-variance_explained.png", outfolder=config["outfolder"]),
        expand("{outfolder}/kpca-factors-biplot.png", outfolder=config["outfolder"])
    shell:
        "2-dimension_reduction/1b-factor_analysis_plot.R {config[outfolder]}"


rule dimred_stat:
    input:
        expand("{outfolder}/{dimred}", outfolder=config["outfolder"], dimred = ["fa", "pca", "kpca"])
    output:
        expand("{outfolder}/{dimred}-sample.log", outfolder=config["outfolder"], dimred = ["fa", "pca", "kpca"]),
        out = expand("{outfolder}/{dimred}-sample.tsv", outfolder=config["outfolder"], dimred = ["fa", "pca", "kpca"]),
    run:
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    2-dimension_reduction/2a-sample-spark.py \
                    -f {} \
                    -o {}""".format(
            config["spark"], config["sparkip"], params, input, output.out)
        shell("{cmd}")


rule dimred_plot:
    input:
        expand("{outfolder}/{dimred}-sample.tsv", outfolder=config["outfolder"], dimred = ["fa", "pca", "kpca"])
    output:
        expand("{outfolder}/{dimred}-sample-feature_distributions", outfolder=config["outfolder"], dimred = ["fa", "pca", "kpca"])
    shell:
        "2-dimension_reduction/2b-plot_feature_distribution.R {input}"


rule outliers:
    input:
        expand("{outfolder}/{dimred}", outfolder=config["outfolder"], dimred = ["fa", "pca", "kpca"])
    output:
        expand("{outfolder}/outlier-removal.log", outfolder=config["outfolder"]),
        out = expand("{outfolder}/outlier-removal", outfolder=config["outfolder"])
    run:
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    2-dimension_reduction/3-remove_outliers.py \
                    -f {} \
                    -o {}""".format(
            config["spark"], config["sparkip"], params, input, output.out)
        shell("{cmd}")


rule kmeans_fit:
    input:
        expand("{outfolder}/outlier-removal", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/kmeans-fit-lrt_path.tsv", outfolder = config["outfolder"]),
        expand("{outfolder}/kmeans-fit.log", outfolder = config["outfolder"])
    run:
        out = config["outfolder"] + "/kmeans-fit-recursive"
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    3-clustering/1a-kmeans-fit-recursive-spark.py \
                    -f {} \
                    -o {} \
                    -k {}""".format(
          config["spark"], config["sparkip"], params, input, out, config["max_centers"])
        shell("{cmd}")


rule gmm_fit:
    input:
        expand("{outfolder}/outlier-removal", outfolder=config["outfolder"])
    output:
       expand("{outfolder}/gmm-fit-lrt_path.tsv",
              outfolder = config["outfolder"]),
       expand("{outfolder}/gmm-fit.log", outfolder = config["outfolder"])
    run:
        out = config["outfolder"] + "/kmeans-fit-recursive"
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    3-clustering/1a-kmeans-fit-recursive-spark.py \
                    -f {} \
                    -o {} \
                    -k {}""".format(
          config["spark"], config["sparkip"], params, input, out, config["max_centers"])
        shell("{cmd}")


rule clustering_fit_plot:
    input:
      expand("{outfolder}/{clustering}-fit-lrt_path.tsv",
             outfolder = config["outfolder"],
             clustering = ["kmeans", "gmm"]),
      expand("{outfolder}/{clustering}-fit.log",
              outfolder = config["outfolder"],
              clustering = ["kmeans", "gmm"])
    output:
        expand("{outfolder}/{clustering}-fit-plot.log",
               outfolder=config["outfolder"],
               clustering = ["kmeans", "gmm"]),
        expand("{outfolder}/{clustering}-fit-cluster_sizes-stats.tsv",
               outfolder=config["outfolder"],
               clustering = ["kmeans", "gmm"])
    shell:
        "3-clustering/1a-clustering-fit-plot.R -f {config[outfolder]} -a kmeans"


rule cluster_transform:
    input:
        expand("{outfolder}/{clustering}-fit-lrt_path.tsv",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),
        inf = expand("{outfolder}/outlier-removal", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/{clustering}-transformed-clusters",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),
        out = expand("{outfolder}/{clustering}-transformed",
                     outfolder = config["outfolder"],
                     clustering = ["kmeans", "gmm"]),
        inc = expand("{outfolder}/{clustering}-transformed.log",
                     outfolder = config["outfolder"],
                     clustering = ["kmeans", "gmm"])
    run:
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    3-clustering/1b-kmeans-transform-recursive-spark.py \
                    -f {} \
                    -c {} \
                    -o {}""".format(
            config["spark"], config["sparkip"], params, input.inf, output.inc , output.out)
        shell("{cmd}")


rule clustering_stat:
    input:
        expand("{outfolder}/kmeans-transformed", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/{clustering}-transformed-statistics.log",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),
        expand("{outfolder}/{clustering}-transformed-statistics-gene_prediction_counts",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),
        expand("{outfolder}/{clustering}-transformed-statistics-silhouette.tsv",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"])
    run:
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    3-clustering/1c-kmeans-statistics-spark.py \
                    -f {}""".format(
            config["spark"], config["sparkip"], params, input)
        shell("{cmd}")


rule clustering_plot:
    input:
        cnt = expand("{outfolder}/{clustering}-transformed-statistics-gene_prediction_counts",
                     outfolder=config["outfolder"],
                     clustering = ["kmeans", "gmm"]),
        sil = expand("{outfolder}/{clustering}-transformed-statistics-silhouette.tsv",
                     outfolder=config["outfolder"],
                     clustering = ["kmeans", "gmm"])
    output:
        expand("{outfolder}/kmeans-transformed-statistics-plot.log", outfolder=config["outfolder"])
    run:
        shell("3-clustering/1d-kmeans-statistics_plot.R -g {input.cnt} -s {input.sil}")