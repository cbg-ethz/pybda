# Copyright (C) 2018, 2019 Simon Dirmeier
#
# This file is part of pybda.
#
# pybda is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pybda is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pybda. If not, see <http://www.gnu.org/licenses/>.
#
# @author = 'Simon Dirmeier'
# @email = 'simon.dirmeier@bsse.ethz.ch'


import typing

from pybda import dirname
from pybda import PyBDAConfig
from pybda.globals import CLUSTERING__
from pybda.globals import CLUSTERING_INFILE__
from pybda.globals import DEBUG__
from pybda.globals import DIM_RED__
from pybda.globals import DIM_RED_INFILE__
from pybda.globals import FAMILY__
from pybda.globals import FACTOR_ANALYSIS__
from pybda.globals import FEATURES__
from pybda.globals import INFILE__
from pybda.globals import ICA__
from pybda.globals import KPCA__
from pybda.globals import LDA__
from pybda.globals import MAHA__
from pybda.globals import MAX_CENTERS__
from pybda.globals import META__
from pybda.globals import METHODS__
from pybda.globals import N_CENTERS__
from pybda.globals import N_COMPONENTS__
from pybda.globals import OUTFOLDER__
from pybda.globals import OUTLIERS__
from pybda.globals import OUTLIERS_INFILE__
from pybda.globals import PCA__
from pybda.globals import PREDICT__
from pybda.globals import PVAL__
from pybda.globals import REGRESSION_INFILE__
from pybda.globals import REGRESSION__
from pybda.globals import RESPONSE__
from pybda.globals import REQUIRED_ARGS__
from pybda.globals import SPARKPARAMS__
from pybda.globals import SPARKIP__
from pybda.globals import SPARK__
from pybda.logger import logger_format

pybda_config = PyBDAConfig(config)


def _submit_dim_red(method, input, out, params):
    cmd = """{} --master {} {} {} {} {} {} {}""".format(
        pybda_config[SPARK__],
        pybda_config[SPARKIP__],
        params,
        method,
        pybda_config[N_COMPONENTS__],
        input,
        pybda_config[FEATURES__],
        out)
    _run(cmd)


def _run(cmd):
    if DEBUG__ in pybda_config:
        shell("echo -e '\033[1;33m Submitting job {cmd} \033[\033[0m'")
    shell("{cmd}")


rule factor_analysis:
    input:
        expand("{infile}", infile=pybda_config[INFILE__])
    output:
        expand("{outfolder}/{dimred}{fls}",
               outfolder=pybda_config[OUTFOLDER__],
               dimred=FACTOR_ANALYSIS__, fls=[".tsv", "-loadings.tsv", "-loglik.tsv"]),
        directory(expand("{outfolder}/{dimred}-plot",
                         outfolder=pybda_config[OUTFOLDER__],
                         dimred=FACTOR_ANALYSIS__))
    params:
        out = expand("{outfolder}/{dimred}",
                     outfolder=pybda_config[OUTFOLDER__],
                     dimred=FACTOR_ANALYSIS__),
        fa = os.path.join(dirname(), "factor_analysis.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]])
    run:
        _submit_dim_red(params.fa, input, params.out[0], params.params)


rule pca:
    input:
        expand("{infile}", infile=pybda_config[INFILE__])
    output:
        expand("{outfolder}/{dimred}{fls}",
               outfolder=pybda_config[OUTFOLDER__],
               dimred=PCA__, fls=[".tsv", "-loadings.tsv"]),
        directory(expand("{outfolder}/{dimred}-plot",
                         outfolder=pybda_config[OUTFOLDER__],
                         dimred=PCA__))
    params:
        out = expand("{outfolder}/{dimred}",
                     outfolder=pybda_config[OUTFOLDER__],
                     dimred=PCA__),
        pca = os.path.join(dirname(), "pca.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]])
    run:
        _submit_dim_red(params.pca, input, params.out[0], params.params)


rule kpca:
    input:
        expand("{infile}", infile=pybda_config[INFILE__])
    output:
        expand("{outfolder}/{dimred}{fls}",
               outfolder=pybda_config[OUTFOLDER__],
               dimred=KPCA__, fls=[".tsv", "-loadings.tsv"]),
        directory(expand("{outfolder}/{dimred}-plot",
                         outfolder=pybda_config[OUTFOLDER__],
                         dimred=KPCA__))
    params:
        out = expand("{outfolder}/{dimred}",
                     outfolder=pybda_config[OUTFOLDER__],
                     dimred=KPCA__),
        pca = os.path.join(dirname(), "kpca.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]])
    run:
      _submit_dim_red(params.pca, input, params.out[0], params.params)


rule ica:
    input:
        expand("{infile}", infile=pybda_config[INFILE__])
    output:
        expand("{outfolder}/{dimred}{fls}",
               outfolder=pybda_config[OUTFOLDER__],
               dimred=ICA__, fls=[".tsv", "-loadings.tsv"]),
        directory(expand("{outfolder}/{dimred}-plot",
                         outfolder=pybda_config[OUTFOLDER__],
                         dimred=ICA__))
    params:
        out = expand("{outfolder}/{dimred}",
                     outfolder=pybda_config[OUTFOLDER__],
                     dimred=ICA__),
        pca = os.path.join(dirname(), "ica.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]])
    run:
      _submit_dim_red(params.pca, input, params.out[0], params.params)


rule lda:
    input:
        expand("{infile}", infile=pybda_config[INFILE__])
    output:
        expand("{outfolder}/{dimred}{fls}",
               outfolder=pybda_config[OUTFOLDER__],
               dimred=LDA__, fls=[".tsv",  "-projection.tsv"]),
        directory(expand("{outfolder}/{dimred}-plot",
                         outfolder=pybda_config[OUTFOLDER__],
                         dimred=LDA__))
    params:
        out = expand("{outfolder}/{dimred}",
                     outfolder=pybda_config[OUTFOLDER__],
                     dimred=LDA__),
        pca = os.path.join(dirname(), "lda.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]])
    run:
        cmd = """{} --master {} {} {} {} {} {} {} {}""".format(
            pybda_config[SPARK__],
            pybda_config[SPARKIP__],
            params.params,
            params.pca,
            pybda_config[N_COMPONENTS__],
            input,
            pybda_config[FEATURES__],
            pybda_config[RESPONSE__],
            params.out[0])
        _run(cmd)


rule sample:
    params:
        params = " ".join([x for x in config[SPARKPARAMS__]]),
        sam = os.path.join(dirname(), "sampler.py")
    run:
        cmd = """{} --master {} {} {} {} {} {} {}""".format(
            pybda_config[SPARK__],
            pybda_config[SPARKIP__],
            params.params,
            params.sam,
            pybda_config["input"],
            pybda_config["output"],
            pybda_config["n"],
            pybda_config["split"])
        if DEBUG__ in pybda_config:
            shell("echo -e '\033[1;33m Submitting job {cmd} \033[0m'")
        shell("{cmd}")


rule outliers:
    input:
        expand("{outfolder}/{dimred}",
               outfolder=pybda_config[OUTFOLDER__],
               dimred=pybda_config[DIM_RED__])
    output:
        out = directory(expand("{outfolder}/{outlier}",
                               outfolder=pybda_config[OUTFOLDER__],
                               outlier=MAHA__))
    params:
        params = " ".join([x for x in config[SPARKPARAMS__]]),
        outr = os.path.join(dirname(), "outliers.py"),
        pval = pybda_config[PVAL__] if PVAL__ in pybda_config else 0.05
    run:
        cmd = """{} --master {} {} {} {} {} {}""".format(
            pybda_config[SPARK__],
            pybda_config[SPARKIP__],
            params.params,
            params.outr,
            input,
            output.out,
            params.pval)
        if DEBUG__ in pybda_config:
            shell("echo -e '\033[1;33m Submitting job {cmd} \033[0m'")
        shell("{cmd}")


def _run_regression(params, reg, input, out):
    predict = "None"
    if PREDICT__ in pybda_config:
        predict = pybda_config[PREDICT__]
    cmd = """{} --master {} {} {} {} {} {} {} {} {} {} {}""".format(
          pybda_config[SPARK__],
          pybda_config[SPARKIP__],
          params,
          reg,
          "--predict", predict,
          input,
          pybda_config[META__],
          pybda_config[FEATURES__],
          pybda_config[RESPONSE__],
          pybda_config[FAMILY__],
          out)
    _run(cmd)


rule glm:
    input:
        expand("{infile}", infile=pybda_config[REGRESSION_INFILE__])
    output:
        expand("{outfolder}/{regression}{out}",
               outfolder=pybda_config[OUTFOLDER__],
               regression=pybda_config[REGRESSION__],
               out=["-table.tsv", "-statistics.tsv"])
    params:
        out = os.path.join(
            pybda_config[OUTFOLDER__], pybda_config[REGRESSION__]),
        reg = os.path.join(dirname(), "glm.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]]),
    run:
        _run_regression(params.params, params.reg, input, params.out)


rule forest:
    input:
        expand("{infile}", infile=pybda_config[REGRESSION_INFILE__])
    output:
        expand("{outfolder}/{regression}{out}",
               outfolder=pybda_config[OUTFOLDER__],
               regression=pybda_config[REGRESSION__],
               out=["-statistics.tsv"])
    params:
        out = os.path.join(
            pybda_config[OUTFOLDER__], pybda_config[REGRESSION__]),
        reg = os.path.join(dirname(), "forest.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]]),
    run:
        _run_regression(params.params, params.reg, input, params.out)


rule gbm:
    input:
        expand("{infile}", infile=pybda_config[REGRESSION_INFILE__])
    output:
        expand("{outfolder}/{regression}{out}",
               outfolder=pybda_config[OUTFOLDER__],
               regression=pybda_config[REGRESSION__],
               out=["-statistics.tsv"])
    params:
        out = os.path.join(
            pybda_config[OUTFOLDER__], pybda_config[REGRESSION__]),
        reg = os.path.join(dirname(), "gbm.py"),
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]]),
    run:
        _run_regression(params.params, params.reg, input, params.out)


def _run_clustering(params, kme, input, out):
    clust = str(pybda_config[N_CENTERS__]).replace(" ", "")
    cmd = """{} --master {} {} {} {} {} {} {}""".format(
          pybda_config[SPARK__],
          pybda_config[SPARKIP__],
          params,
          kme,
          clust,
          input,
          pybda_config[FEATURES__],
          out)
    _run(cmd)


rule kmeans:
    input:
        expand("{infile}", infile=pybda_config[CLUSTERING_INFILE__])
    output:
        directory(expand("{outfolder}/{clust}",
                         clust=pybda_config[CLUSTERING__],
                         outfolder=pybda_config[OUTFOLDER__])),
        expand("{outfolder}/{clust}-profile.{out}",
               clust=pybda_config[CLUSTERING__],
               outfolder=pybda_config[OUTFOLDER__], out=["png", "pdf", "eps", "svg", "tsv"]),
        directory(expand("{outfolder}/{clust}-transformed-K{k}-clusters",
                         clust=pybda_config[CLUSTERING__],
                         outfolder=pybda_config[OUTFOLDER__],
                         k=pybda_config[N_CENTERS__].replace(" ", "").split(",")))
    params:
        out = pybda_config[OUTFOLDER__] + "/kmeans",
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]]),
        kme = os.path.join(dirname(), "kmeans.py")
    run:
        _run_clustering(params.params, params.kme, input, params.out)


rule gmm:
    input:
        expand("{infile}", infile=pybda_config[CLUSTERING_INFILE__])
    output:
        directory(expand("{outfolder}/{clust}",
                         clust=pybda_config[CLUSTERING__],
                         outfolder=pybda_config[OUTFOLDER__])),
        expand("{outfolder}/{clust}-profile.{out}",
               clust=pybda_config[CLUSTERING__],
               outfolder=pybda_config[OUTFOLDER__], out=["png", "pdf", "eps", "svg", "tsv"]),
        directory(expand("{outfolder}/{clust}-transformed-K{k}-components",
                         clust=pybda_config[CLUSTERING__],
                         outfolder=pybda_config[OUTFOLDER__],
                         k=pybda_config[N_CENTERS__].replace(" ", "").split(",")))
    params:
        out = pybda_config[OUTFOLDER__] + "/gmm",
        params = " ".join([x for x in pybda_config[SPARKPARAMS__]]),
        kme = os.path.join(dirname(), "gmm.py")
    run:
        _run_clustering(params.params, params.kme, input, params.out)
