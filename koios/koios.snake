# Copyright (C) 2018 Simon Dirmeier
#
# This file is part of koios.
#
# koios is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# koios is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with koios. If not, see <http://www.gnu.org/licenses/>.
#
# @author = 'Simon Dirmeier'
# @email = 'simon.dirmeier@bsse.ethz.ch'


import typing

from koios import dirname
from koios import KoiosConfig
from koios.globals import CLUSTERING__
from koios.globals import CLUSTERING_INFILE__
from koios.globals import DEBUG__
from koios.globals import DIM_RED__
from koios.globals import DIM_RED_INFILE__
from koios.globals import FAMILY__
from koios.globals import FACTOR_ANALYSIS__
from koios.globals import FEATURES__
from koios.globals import INFILE__
from koios.globals import KPCA__
from koios.globals import MAHA__
from koios.globals import MAX_CENTERS__
from koios.globals import META__
from koios.globals import METHODS__
from koios.globals import N_CENTERS__
from koios.globals import N_COMPONENTS__
from koios.globals import OUTFOLDER__
from koios.globals import OUTLIERS__
from koios.globals import OUTLIERS_INFILE__
from koios.globals import PCA__
from koios.globals import PVAL__
from koios.globals import REGRESSION_INFILE__
from koios.globals import REGRESSION__
from koios.globals import RESPONSE__
from koios.globals import REQUIRED_ARGS__
from koios.globals import SPARKPARAMS__
from koios.globals import SPARKIP__
from koios.globals import SPARK__
from koios.logger import logger_format

koios_config = KoiosConfig(config)


def _submit_dim_red(method, input, out, params):
    cmd = """{} --master {} {} {} {} {} {}""".format(
        koios_config[SPARK__],
        koios_config[SPARKIP__],
        params,
        method,
        koios_config[N_COMPONENTS__],
        input,
        out)
    run(cmd)


def _run(cmd):
    if DEBUG__ in koios_config:
        shell("echo -e '\033[1;33m Submitting job {cmd} \033[\033[0m'")
    shell("{cmd}")


rule factor_analysis:
    input:
        expand("{infile}", infile=koios_config[INFILE__])
    output:
        out = directory(expand("{outfolder}/{dimred}",
                               outfolder=koios_config[OUTFOLDER__],
                               dimred=FACTOR_ANALYSIS__))
    params:
        fa = os.path.join(dirname(), "factor_analysis.py"),
        params = " ".join([x for x in koios_config[SPARKPARAMS__]])
    run:
        _submit_dim_red(params.fa, input, output.out, params.params)


rule pca:
    input:
        expand("{infile}", infile=koios_config[INFILE__])
    output:
        out = directory(expand("{outfolder}/{dimred}",
                               outfolder=koios_config[OUTFOLDER__],
                               dimred=PCA__))
    params:
        pca = os.path.join(dirname(), "pca.py"),
        params = " ".join([x for x in koios_config[SPARKPARAMS__]])
    run:
        _submit_dim_red(params.pca, input, output.out, params.params)


rule kpca:
    input:
        expand("{infile}", infile=koios_config[INFILE__])
    output:
        out = directory(expand("{outfolder}/{dimred}",
                               outfolder=koios_config[OUTFOLDER__],
                               dimred=KPCA__))
    params:
        pca = os.path.join(dirname(), "kpca.py"),
        params = " ".join([x for x in koios_config[SPARKPARAMS__]])
    run:
        _submit_dim_red(params.pca, input, output.out, params.params)


rule sample:
    params:
        params = " ".join([x for x in config[SPARKPARAMS__]]),
        sam = os.path.join(dirname(), "sampler.py")
    run:
        cmd = """{} --master {} {} {} {} {} {} {}""".format(
            koios_config[SPARK__],
            koios_config[SPARKIP__],
            params.params,
            params.sam,
            koios_config["input"],
            koios_config["output"],
            koios_config["n"],
            koios_config["split"])
        if DEBUG__ in koios_config:
            shell("echo -e '\033[1;33m Submitting job {cmd} \033[0m'")
        shell("{cmd}")


rule outliers:
    input:
        expand("{outfolder}/{dimred}",
               outfolder=koios_config[OUTFOLDER__],
               dimred=koios_config[DIM_RED__])
    output:
        out = directory(expand("{outfolder}/{outlier}",
                               outfolder=koios_config[OUTFOLDER__],
                               outlier=MAHA__))
    params:
        params = " ".join([x for x in config[SPARKPARAMS__]]),
        outr = os.path.join(dirname(), "outliers.py"),
        pval = koios_config[PVAL__] if PVAL__ in koios_config else 0.05
    run:
        cmd = """{} --master {} {} {} {} {} {}""".format(
            koios_config[SPARK__],
            koios_config[SPARKIP__],
            params.params,
            params.outr,
            input,
            output.out,
            params.pval)
        if DEBUG__ in koios_config:
            shell("echo -e '\033[1;33m Submitting job {cmd} \033[0m'")
        shell("{cmd}")


rule glm:
    input:
        expand("{infile}", infile=koios_config[REGRESSION_INFILE__])
    output:
        expand("{outfolder}/{regression}-{out}.tsv",
               outfolder=koios_config[OUTFOLDER__],
               regression=koios_config[REGRESSION__],
               out=["table", "statistics"])
    params:
        out = os.path.join(
            koios_config[OUTFOLDER__], koios_config[REGRESSION__]),
        reg = os.path.join(dirname(), "glm.py"),
        params = " ".join([x for x in koios_config[SPARKPARAMS__]])
    run:
        cmd = """{} --master {} {} {} {} {} {} {} {} {}""".format(
            koios_config[SPARK__],
            koios_config[SPARKIP__],
            params.params,
            params.reg,
            input,
            koios_config[META__],
            koios_config[FEATURES__],
            koios_config[RESPONSE__],
            koios_config[FAMILY__],
            params.out)
        if DEBUG__ in koios_config:
            shell("echo -e '\033[1;33m Submitting job {cmd} \033[0m'")
        shell("{cmd}")


def _run_clusterfit(params, kme, input, out):
    if MAX_CENTERS__ in config:
        clust = koios_config[MAX_CENTERS__]
        findbest = "--findbest"
    elif N_CENTERS__ in config:
        clust = koios_config[N_CENTERS__]
        findbest = ""
    elif all(x in koios_config for x in [MAX_CENTERS__, N_CENTERS__]):
        raise ValueError("Cannot set '{}' and '{}' at same time".format(
            N_CENTERS__, MAX_CENTERS__))
    cmd = """{} --master {} {} {} {} {} {} {} {}""".format(
          koios_config[SPARK__],
          koios_config[SPARKIP__],
          params,
          kme,
          "fit",
          input,
          out,
          clust,
          findbest)
    _run(cmd)


rule kmeans_fit:
    input:
        expand("{infile}", infile=koios_config[CLUSTERING_INFILE__])
    output:
        directory(expand("{outfolder}/{clust}-fit",
                         clust=koios_config[CLUSTERING__],
                         outfolder=koios_config[OUTFOLDER__]))
    params:
        out = koios_config[OUTFOLDER__] + "/kmeans-fit",
        params = " ".join([x for x in koios_config[SPARKPARAMS__]]),
        kme = os.path.join(dirname(), "kmeans.py")
    run:
        _run_clusterfit(params.params, params.kme, input, out)


rule gmm_fit:
    input:
        expand("{infile}", infile=koios_config[CLUSTERING_INFILE__])
    output:
        directory(expand("{outfolder}/{clust}-fit",
                         clust=koios_config[CLUSTERING__],
                         outfolder=koios_config[OUTFOLDER__]))
    params:
        out = koios_config[OUTFOLDER__] + "/gmm-fit",
        params = " ".join([x for x in koios_config[SPARKPARAMS__]]),
        kme = os.path.join(dirname(), "gmm.py")
    run:
       _run_clusterfit(params.params, params.kme, input, out)


rule kmeans_transform:
    input:
        fitf = expand("{outfolder}/{clust}-fit",
                      outfolder=koios_config[OUTFOLDER__],
                      clust=koios_config[CLUSTERING__]),
        inf = expand("{infile}", infile=koios_config[CLUSTERING_INFILE__])
    output:
        out = directory(expand("{outfolder}/{clust}-transformed",
                               clust=koios_config[CLUSTERING__],
                               outfolder=koios_config[OUTFOLDER__]))
    params:
        kme = os.path.join(dirname(), "kmeans.py"),
        params = " ".join([x for x in koios_config[SPARKPARAMS__]])
    run:

        cmd = """{} --master {} {} {} {} {} {} {}""".format(
            koios_config[SPARK__],
            koios_config[SPARKIP__],
            params.params,
            params.kme,
            "transform",
            input.inf,
            input.fitf,
            output.out)
        _run(cmd)


rule clustering_statistics:
    input:
        expand("{outfolder}/{clust}-transformed",
               outfolder=koios_config[OUTFOLDER__],
               clust=koios_config[CLUSTERING__])
    output:
        expand("{outfolder}/{clust}-transformed-silhouettes.tsv",
               outfolder=koios_config[OUTFOLDER__],
               clust=koios_config[CLUSTERING__])
    params:
        kms = os.path.join(dirname(), "cluster_statistics.py"),
        params = " ".join([x for x in koios_config[SPARKPARAMS__]])
    run:
        cmd = """{} --master {} {} {} {}""".format(
            koios_config[SPARK__],
            koios_config[SPARKIP__],
            params.params,
            params.kms,
            input)
        _run(cmd)
