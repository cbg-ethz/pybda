# Copyright (C) 2018 Simon Dirmeier
#
# This file is part of koios.
#
# koios is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# koios is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with koios. If not, see <http://www.gnu.org/licenses/>.
#
# @author = 'Simon Dirmeier'
# @email = 'simon.dirmeier@bsse.ethz.ch'


import typing
from snakemake.logging import logger


from koios import dirname
from koios import KoiosConfig
from koios.globals import CLUSTERING__
from koios.globals import CLUSTERING_INFILE__
from koios.globals import DEBUG__
from koios.globals import DIM_RED__
from koios.globals import DIM_RED_INFILE__
from koios.globals import FAMILY__
from koios.globals import FACTOR_ANALYSIS__
from koios.globals import FEATURES__
from koios.globals import INFILE__
from koios.globals import KPCA__
from koios.globals import MAHA__
from koios.globals import META__
from koios.globals import METHODS__
from koios.globals import N_COMPONENTS__
from koios.globals import OUTFOLDER__
from koios.globals import OUTLIERS__
from koios.globals import OUTLIERS_INFILE__
from koios.globals import PCA__
from koios.globals import PVAL__
from koios.globals import REGRESSION_INFILE__
from koios.globals import REGRESSION__
from koios.globals import RESPONSE__
from koios.globals import REQUIRED_ARGS__
from koios.globals import SPARKPARAMS__
from koios.globals import SPARKIP__
from koios.globals import SPARK__
from koios.logger import logger_format

logger.propagate = True
koios_config = KoiosConfig(config)


def _submit_dim_red(method, input, out, params):
    cmd = """{} --master {} {} {} {} {} {}""".format(
        koios_config[SPARK__],
        koios_config[SPARKIP__],
        params,
        method,
        koios_config[N_COMPONENTS__],
        input,
        out),
    if DEBUG__ in koios_config:
        shell("echo -e '\033[1;33m Submitting job {cmd} \033[\033[0m'")
    shell("{cmd}")


rule factor_analysis:
    input:
        expand("{infile}", infile=koios_config[INFILE__])
    output:
        out = directory(expand("{outfolder}/{dimred}",
                               outfolder=koios_config[OUTFOLDER__],
                               dimred=FACTOR_ANALYSIS__))
    params:
        fa = os.path.join(dirname(), "factor_analysis.py"),
        params = " ".join([x for x in koios_config[SPARKPARAMS__]])
    run:
        _submit_dim_red(params.fa, input, output.out, params.params)


rule pca:
    input:
        expand("{infile}", infile=koios_config[INFILE__])
    output:
        out = directory(expand("{outfolder}/{dimred}",
                               outfolder=koios_config[OUTFOLDER__],
                               dimred=PCA__))
    params:
        pca = os.path.join(dirname(), "pca.py"),
        params = " ".join([x for x in koios_config[SPARKPARAMS__]])
    run:
        _submit_dim_red(params.pca, input, output.out, params.params)

rule kpca:
    input:
        expand("{infile}", infile=koios_config[INFILE__])
    output:
        out = directory(expand("{outfolder}/{dimred}",
                               outfolder=koios_config[OUTFOLDER__],
                               dimred=KPCA__))
    params:
        pca = os.path.join(dirname(), "kpca.py"),
        params = " ".join([x for x in koios_config[SPARKPARAMS__]])
    run:
        _submit_dim_red(params.pca, input, output.out, params.params)


rule sample:
    params:
        params = " ".join([x for x in config[SPARKPARAMS__]]),
        sam = os.path.join(dirname(), "sampler.py")
    run:
        cmd = """{} --master {} {} {} {} {} {} {}""".format(
            koios_config[SPARK__],
            koios_config[SPARKIP__],
            params.params,
            params.sam,
            koios_config["input"],
            koios_config["output"],
            koios_config["n"],
            koios_config["split"])
        if DEBUG__ in koios_config:
          shell("echo -e '\033[1;33m Submitting job {cmd} \033[0m'")
        shell("{cmd}")


rule outliers:
    input:
        expand("{outfolder}/{dimred}",
               outfolder=koios_config[OUTFOLDER__],
               dimred=koios_config[DIM_RED__])
    output:
        out = directory(expand("{outfolder}/{outlier}",
                               outfolder=koios_config[OUTFOLDER__],
                               outlier=MAHA__))
    params:
        params = " ".join([x for x in config[SPARKPARAMS__]]),
        outr = os.path.join(dirname(), "outliers.py"),
        pval = koios_config[PVAL__] if PVAL__ in koios_config else 0.05
    run:
        cmd = """{} --master {} {} {} {} {} {}""".format(
            config["spark"],
            config["sparkip"],
            params.params,
            params.outr,
            input,
            output.out,
            params.pval)
        if DEBUG__ in koios_config:
            shell("echo -e '\033[1;33m Submitting job {cmd} \033[\033[0m'")
        shell("{cmd}")


rule glm:
    input:
        expand("{infile}", infile=koios_config[REGRESSION_INFILE__])
    output:
        expand("{outfolder}/{regression}-{out}.tsv",
               outfolder=koios_config[OUTFOLDER__],
               regression=koios_config[REGRESSION__],
               out=["table", "statistics"])
    params:
        out = os.path.join(
            koios_config[OUTFOLDER__], koios_config[REGRESSION__]),
        reg = os.path.join(dirname(), "glm.py"),
        params = " ".join([x for x in koios_config[SPARKPARAMS__]])
    run:
        cmd = """{} --master {} {} {} {} {} {} {} {} {}""".format(
            koios_config[SPARK__],
            koios_config[SPARKIP__],
            params.params,
            params.reg,
            input,
            koios_config[META__],
            koios_config[FEATURES__],
            koios_config[RESPONSE__],
            koios_config[FAMILY__],
            params.out)
        if DEBUG__ in koios_config:
            shell("echo -e '\033[1;33m Submitting job {cmd} \033[0m'")
        shell("{cmd}")


rule kmeans_fit:
    input:
      out = directory(expand("{outfolder}/{outlier}",
                      outfolder=koios_config[OUTFOLDER__],
                      outlier=koios_config[CLUSTERING_INFILE__]))
    output:
        expand("{outfolder}/kmeans-fit", outfolder = koios_config["outfolder"])
    params:
      out = config["outfolder"] + "/kmeans-fit"
      params = " ".join([x for x in koios_config[SPARK_PARAMS__]])
      kme = os.path.join(dirname(), "kmeans.py")
    run:
        if "max_centers" in config:
            clust = config["max_centers"]
            findbest = "--findbest"
        if "n_centers" in config:
            clust = config["n_centers"]
            findbest = ""
        if "max_centers" in config and "n_centers" in config:
            raise ValueError("Cannot set 'n_centers' and 'max_clusters' at same time")
        cmd = """{} --master {} {} {} {} {} {} {} {}""".format(config["spark"],
         config["sparkip"], params, kme, "fit", input, out, clust, findbest)
        shell("{cmd}")


rule gmm_fit:
    input:
        expand("{outfolder}/outlier-removal", outfolder=config["outfolder"])
    output:
       expand("{outfolder}/gmm-fit-lrt_path.tsv",
              outfolder = config["outfolder"]),
       expand("{outfolder}/gmm-fit.log", outfolder = config["outfolder"])
    run:
        out = config["outfolder"] + "/kmeans-fit-recursive"
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    3-clustering/1a-kmeans-fit-recursive-spark.py \
                    -f {} \
                    -o {} \
                    -k {}""".format(
          config["spark"], config["sparkip"], params, input, out, config["max_centers"])
        shell("{cmd}")


rule kmeans_transform:
    input:
        expand("{outfolder}/kmeans-fit.log", outfolder = config["outfolder"]),
        expand("{outfolder}/kmeans-fit-profile.{out}", outfolder = config["outfolder"], out = ["svg", "eps", "pdf", "png", "tsv"]),
        expand("{outfolder}/kmeans-fit-cluster_sizes-histogram.{out}", outfolder = config["outfolder"], out = ["svg", "eps", "pdf", "png"]),
        expand("{outfolder}/kmeans-fit-total_sse.tsv", outfolder = config["outfolder"]),
        fitf = expand("{outfolder}/kmeans-fit", outfolder = config["outfolder"]),
        inf = expand("{outfolder}/outlier-removal", outfolder=config["outfolder"])
    output:
        out = expand("{outfolder}/kmeans-transformed",
                     outfolder = config["outfolder"]),
        inc = expand("{outfolder}/kmeans-transformed.log",
                     outfolder = config["outfolder"])
    run:
        kme = os.path.join(dirname(), "kmeans.py")
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    {} \
                    {} \
                    {} \
                    {} \
                    {}""".format(
            config["spark"], config["sparkip"], params, kme, "transform", input.inf, input.fitf, output.out)
        shell("{cmd}")


rule clustering_statistics:
    input:
        expand("{outfolder}/{clustering}-transformed",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),
        expand("{outfolder}/{clustering}-transformed.log",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"])
    output:
        expand("{outfolder}/{clustering}-transformed-statistics.log",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"]),
        expand("{outfolder}/{clustering}-transformed-statistics-{type}_prediction_counts",
               outfolder = config["outfolder"],
               type = ["gene", "pathogen"],
               clustering = ["kmeans", "gmm"]),
        expand("{outfolder}/{clustering}-transformed-statistics-silhouette.tsv",
               outfolder = config["outfolder"],
               clustering = ["kmeans", "gmm"])
    run:
        kms = os.path.join(dirname(), "clustering_statistics.py")
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    {} \
                    {}""".format(
            config["spark"], config["sparkip"], params, kms, input)
        shell("{cmd}")