rule all:
    input:
      expand("{outfolder}/fa", outfolder=config["outfolder"]),
      expand("{outfolder}/fa.log", outfolder=config["outfolder"]),
      expand("{outfolder}/fa_likelihood.tsv", outfolder=config["outfolder"]),
      expand("{outfolder}/fa_factors.tsv", outfolder=config["outfolder"]),

      expand("{outfolder}/fa-likelihood_path.png", outfolder=config["outfolder"]),
      expand("{outfolder}/fa-factors-variance_explained.png", outfolder=config["outfolder"]),
      expand("{outfolder}/fa-factors-biplot.png", outfolder=config["outfolder"]),

      expand("{outfolder}/fa-sample.tsv", outfolder=config["outfolder"]),
      expand("{outfolder}/fa-sample.log", outfolder=config["outfolder"]),
      expand("{outfolder}/fa-sample-feature_distributions", outfolder=config["outfolder"]),

      expand("{outfolder}/outlier-removal.log", outfolder=config["outfolder"]),
      expand("{outfolder}/outlier-removal", outfolder=config["outfolder"]),

      expand("{outfolder}/kmeans-fit-K{center}", outfolder=config["outfolder"], center=config["centers"]),
      expand("{outfolder}/kmeans-fit-K{center}.log", outfolder=config["outfolder"], center=config["centers"]),
      expand("{outfolder}/kmeans-fit-K{center}_cluster_sizes.tsv", outfolder=config["outfolder"], center=config["centers"]),
      expand("{outfolder}/kmeans-fit-K{center}_cluster_centers.tsv", outfolder=config["outfolder"], center=config["centers"]),
      expand("{outfolder}/kmeans-fit-K{center}_sse.tsv", outfolder=config["outfolder"], center=config["centers"]),

      expand("{outfolder}/gmm-fit-K{center}", outfolder=config["outfolder"], center=config["centers"]),
      expand("{outfolder}/gmm-fit-K{center}.log", outfolder=config["outfolder"], center=config["centers"]),
      expand("{outfolder}/gmm-fit-K{center}_cluster_sizes.tsv", outfolder=config["outfolder"], center=config["centers"]),
      expand("{outfolder}/gmm-fit-K{center}_parameters", outfolder=config["outfolder"], center=config["centers"]),
      expand("{outfolder}/gmm-fit-K{center}_mixing_weights.tsv", outfolder=config["outfolder"], center=config["centers"]),
      expand("{outfolder}/gmm-fit-K{center}_loglik.tsv", outfolder=config["outfolder"], center=config["centers"]),

      expand("{outfolder}/kmeans-fit-plot.log", outfolder=config["outfolder"]),
      expand("{outfolder}/kmeans-fit-cluster_sizes-stats.tsv", outfolder=config["outfolder"]),
      expand("{outfolder}/kmeans-fit-cluster_sizes-histogram.{out}", outfolder=config["outfolder"], out=["svg", "png", "eps"]),

      expand("{outfolder}/kmeans-transformed.log", outfolder=config["outfolder"]),
      expand("{outfolder}/kmeans-transformed-clusters", outfolder=config["outfolder"]),
      expand("{outfolder}/kmeans-transformed-bic.{out}", outfolder=config["outfolder"], out=["eps", "png", "svg", "tsv"]),
      expand("{outfolder}/kmeans-transformed", outfolder=config["outfolder"]),

      expand("{outfolder}/kmeans-transformed-statistics.log", outfolder=config["outfolder"]),
      expand("{outfolder}/kmeans-transformed-statistics-gene_prediction_counts.tsv", outfolder=config["outfolder"]),
      expand("{outfolder}/kmeans-transformed-statistics-pathogen_prediction_counts.tsv", outfolder=config["outfolder"]),
      expand("{outfolder}/kmeans-transformed-statistics-gene_pathogen_prediction_counts.tsv", outfolder=config["outfolder"]),
      expand("{outfolder}/kmeans-transformed-statistics-silhouette.tsv", outfolder=config["outfolder"]),

      expand("{outfolder}/kmeans-transformed-statistics-plot.log", outfolder=config["outfolder"]),
      expand("{outfolder}/kmeans-transformed-statistics-gene_pathogen_prediction_counts-frequencies.{out}", outfolder=config["outfolder"], out=["eps", "png", "svg"]),
      expand("{outfolder}/kmeans-transformed-statistics-silhouette.{out}", outfolder=config["outfolder"], out=["eps", "png", "svg"]),
      expand("{outfolder}/kmeans-transformed-statistics-gene_pathogen_prediction_counts-best_cluster.tsv", outfolder=config["outfolder"]),
      expand("{outfolder}/kmeans-transformed-statistics-gene_pathogen_prediction_counts-best_gene_buckets.tsv", outfolder=config["outfolder"]),
      expand("{outfolder}/kmeans-transformed-clusters-gene_clusters.{out}", outfolder=config["outfolder"], out=["eps", "png", "svg"]),


rule fa:
    input:
        expand("{infile}", infile=config["infile"])
    output:
        expand("{outfolder}/fa_likelihood.tsv", outfolder=config["outfolder"]),
        expand("{outfolder}/fa.log", outfolder=config["outfolder"]),
        expand("{outfolder}/fa_factors.tsv", outfolder=config["outfolder"]),
        out = expand("{outfolder}/fa", outfolder=config["outfolder"])
    run:
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    2-dimension_reduction/1a-factor_analysis-spark.py \
                    -c {} \
                    -f {} \
                    -o {}""".format(
            config["spark"], config["sparkip"], params, config["factors"], input, output.out)
        shell("{cmd}")


rule fa_plot:
    input:
        expand("{outfolder}/fa", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/fa-likelihood_path.png", outfolder=config["outfolder"]),
        expand("{outfolder}/fa-factors-variance_explained.png", outfolder=config["outfolder"]),
        expand("{outfolder}/fa-factors-biplot.png", outfolder=config["outfolder"])
    shell:
        "2-dimension_reduction/1b-factor_analysis_plot.R {config[outfolder]}"


rule fa_sample:
    input:
        expand("{outfolder}/fa", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/fa-sample.log", outfolder=config["outfolder"]),
        out = expand("{outfolder}/fa-sample.tsv", outfolder=config["outfolder"]),
    run:
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    2-dimension_reduction/2a-sample-spark.py \
                    -f {} \
                    -o {}""".format(
            config["spark"], config["sparkip"], params, input, output.out)
        shell("{cmd}")


rule fa_distribution_plot:
    input:
        expand("{outfolder}/fa-sample.tsv", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/fa-sample-feature_distributions", outfolder=config["outfolder"])
    shell:
        "2-dimension_reduction/2b-plot_feature_distribution.R {input}"


rule outliers:
    input:
        expand("{outfolder}/{inf}", outfolder=config["outfolder"], inf=["fa"])
    output:
        expand("{outfolder}/outlier-removal.log", outfolder=config["outfolder"]),
        out = expand("{outfolder}/outlier-removal", outfolder=config["outfolder"])
    run:
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    2-dimension_reduction/3-remove_outliers.py \
                    -f {} \
                    -o {}""".format(
            config["spark"], config["sparkip"], params, input, output.out)
        shell("{cmd}")


rule kmeans_fit:
    input:
        expand("{outfolder}/outlier-removal", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/kmeans-fit-K{center}", outfolder=config["outfolder"], center=config["centers"]),
        expand("{outfolder}/kmeans-fit-K{center}.log", outfolder=config["outfolder"], center=config["centers"]),
        expand("{outfolder}/kmeans-fit-K{center}_cluster_sizes.tsv", outfolder=config["outfolder"], center=config["centers"]),
        expand("{outfolder}/kmeans-fit-K{center}_cluster_centers.tsv", outfolder=config["outfolder"], center=config["centers"]),
        expand("{outfolder}/kmeans-fit-K{center}_sse.tsv", outfolder=config["outfolder"], center=config["centers"])
    run:
        out = config["outfolder"] + "/kmeans-fit"
        params = " ".join([x for x in config["sparkparams"]])
        for c in config["centers"]:
            cmd = """{} --master {} \
                        {} \
                        3-clustering/1a-kmeans-fit-spark.py \
                        -f {} \
                        -o {} \
                        -k {}""".format(
              config["spark"], config["sparkip"], params, input, out, c)
            shell("{cmd}")

rule kmeans_recursive_fit:
    input:
        expand("{outfolder}/outlier-removal", outfolder=config["outfolder"])
    run:
        out = config["outfolder"] + "/kmeans-fit-recursive"
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    3-clustering/1a-kmeans-fit-recursive-spark.py \
                    -f {} \
                    -o {} \
                    -k {}""".format(
          config["spark"], config["sparkip"], params, input, out, config["max_centers"])
        shell("{cmd}")


rule gmm_fit:
    input:
        expand("{outfolder}/outlier-removal", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/gmm-fit-K{center}", outfolder=config["outfolder"], center=config["centers"]),
        expand("{outfolder}/gmm-fit-K{center}.log", outfolder=config["outfolder"], center=config["centers"]),
        expand("{outfolder}/gmm-fit-K{center}_cluster_sizes.tsv", outfolder=config["outfolder"], center=config["centers"]),
        expand("{outfolder}/gmm-fit-K{center}_parameters", outfolder=config["outfolder"], center=config["centers"]),
        expand("{outfolder}/gmm-fit-K{center}_mixing_weights.tsv", outfolder=config["outfolder"], center=config["centers"]),
        expand("{outfolder}/gmm-fit-K{center}_loglik.tsv", outfolder=config["outfolder"], center=config["centers"])
    run:
        out = config["outfolder"] + "/gmm-fit"
        params = " ".join([x for x in config["sparkparams"]])
        for c in config["centers"]:
            cmd = """{} --master {} \
                        {} \
                        3-clustering/1a-gmm-fit-spark.py \
                        -f {} \
                        -o {} \
                        -k {}""".format(
              config["spark"], config["sparkip"], params, input, out, c)
            shell("{cmd}")


rule kmeans_fit_plot:
    input:
        expand("{outfolder}/kmeans-fit-K{center}_cluster_sizes.tsv", outfolder=config["outfolder"], center=config["centers"])
    output:
        expand("{outfolder}/kmeans-fit-plot.log", outfolder=config["outfolder"]),
        expand("{outfolder}/kmeans-fit-cluster_sizes-stats.tsv", outfolder=config["outfolder"]),
        expand("{outfolder}/kmeans-fit-cluster_sizes-histogram.{out}", outfolder=config["outfolder"], out=["svg", "png", "eps"])
    shell:
        "3-clustering/1a-clustering-fit-plot.R -f {config[outfolder]} -a kmeans"


rule gmm_fit_plot:
    input:
        expand("{outfolder}/gmm-fit-K{center}_cluster_sizes.tsv", outfolder=config["outfolder"], center=config["centers"])
    output:
        expand("{outfolder}/gmm-fit-plot.log", outfolder=config["outfolder"]),
        expand("{outfolder}/gmm-fit-cluster_sizes-stats.tsv", outfolder=config["outfolder"]),
        expand("{outfolder}/gmm-fit-cluster_sizes-histogram.{out}", outfolder=config["outfolder"], out=["svg", "png", "eps"])
    shell:
        "3-clustering/1a-clustering-fit-plot.R -f {config[outfolder]} -a gmm"


rule kmeans_transform:
    input:
        expand("{outfolder}/kmeans-fit-K{center}", outfolder=config["outfolder"], center=config["centers"]),
        expand("{outfolder}/kmeans-fit-K{center}.log", outfolder=config["outfolder"], center=config["centers"]),
        expand("{outfolder}/kmeans-fit-K{center}_cluster_sizes.tsv", outfolder=config["outfolder"], center=config["centers"]),
        inf = expand("{outfolder}/outlier-removal", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/kmeans-transformed.log", outfolder=config["outfolder"]),
        expand("{outfolder}/kmeans-transformed-clusters", outfolder=config["outfolder"]),
        expand("{outfolder}/kmeans-transformed-bic.{out}", outfolder=config["outfolder"], out=["eps", "png", "svg", "tsv"]),
        out = expand("{outfolder}/kmeans-transformed", outfolder=config["outfolder"])
    run:
        inc = config["outfolder"] + "/kmeans-fit"
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    3-clustering/1b-kmeans-transform-spark.py \
                    -f {} \
                    -c {} \
                    -o {}""".format(
            config["spark"], config["sparkip"], params, input.inf, inc , output.out)
        shell("{cmd}")


rule kmeans_transform:
    input:
        expand("{outfolder}/kmeans-fit-recursive-lrt_path.tsv", outfolder=config["outfolder"])
        inf = expand("{outfolder}/outlier-removal", outfolder=config["outfolder"])
    run:
        inc = config["outfolder"] + "/kmeans-fit-recursive"
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    3-clustering/1b-kmeans-transform-spark.py \
                    -f {} \
                    -c {} \
                    -o {}""".format(
            config["spark"], config["sparkip"], params, input.inf, inc , output.out)
        shell("{cmd}")


rule kmeans_statistics:
    input:
        expand("{outfolder}/kmeans-transformed", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/kmeans-transformed-statistics.log", outfolder=config["outfolder"]),
        expand("{outfolder}/kmeans-transformed-statistics-gene_prediction_counts.tsv", outfolder=config["outfolder"]),
        expand("{outfolder}/kmeans-transformed-statistics-pathogen_prediction_counts.tsv", outfolder=config["outfolder"]),
        expand("{outfolder}/kmeans-transformed-statistics-gene_pathogen_prediction_counts.tsv", outfolder=config["outfolder"]),
        expand("{outfolder}/kmeans-transformed-statistics-silhouette.tsv", outfolder=config["outfolder"])
    run:
        params = " ".join([x for x in config["sparkparams"]])
        cmd = """{} --master {} \
                    {} \
                    3-clustering/1c-kmeans-statistics-spark.py \
                    -f {}""".format(
            config["spark"], config["sparkip"], params, input)
        shell("{cmd}")



rule kmeans_plot:
    input:
        cnt = expand("{outfolder}/kmeans-transformed-statistics-gene_pathogen_prediction_counts.tsv", outfolder=config["outfolder"]),
        sil = expand("{outfolder}/kmeans-transformed-statistics-silhouette.tsv", outfolder=config["outfolder"])
    output:
        expand("{outfolder}/kmeans-transformed-statistics-plot.log", outfolder=config["outfolder"]),
        expand("{outfolder}/kmeans-transformed-statistics-gene_pathogen_prediction_counts-frequencies.{out}", outfolder=config["outfolder"], out=["eps", "png", "svg"]),
        expand("{outfolder}/kmeans-transformed-statistics-silhouette.{out}", outfolder=config["outfolder"], out=["eps", "png", "svg"]),
        expand("{outfolder}/kmeans-transformed-statistics-gene_pathogen_prediction_counts-best_cluster.tsv", outfolder=config["outfolder"]),
        expand("{outfolder}/kmeans-transformed-statistics-gene_pathogen_prediction_counts-best_gene_buckets.tsv", outfolder=config["outfolder"]),
        expand("{outfolder}/kmeans-transformed-clusters-gene_clusters.{out}", outfolder=config["outfolder"], out=["eps", "png", "svg"])
    run:
        shell("3-clustering/1d-kmeans-statistics_plot.R -g {input.cnt} -s {input.sil}")
